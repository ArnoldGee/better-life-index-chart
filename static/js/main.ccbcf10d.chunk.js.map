{"version":3,"sources":["types/index.js","reducers/index.js","data/better_life_index_data.csv","util/getData.js","components/TypedText.jsx","components/Hero.jsx","components/Navbar.jsx","util/createDataArray.js","util/camelCaseToWords.js","components/ChartComponent.jsx","components/ChartSelector.jsx","actions/index.js","components/ChartsArea.jsx","components/Footer.jsx","App.jsx","index.js"],"names":["types","ADD_CHART_DATA","CHANGE_SELECTED_CHART","initialChartOptions","selectedChart","options","combineReducers","chartData","state","type","payload","chartOptions","Object","keys","shift","getCSV","a","fetch","importedCsvData","response","text","csvString","dataObject","Papa","parse","header","TypedText","delay","onComplete","spanRef","useRef","useEffect","typed","Typed","current","strings","typeSpeed","startDelay","showCursor","destroy","ref","Hero","useState","firstElementTyped","setFirstElementTyped","className","Navbar","createDataArray","data","selector","map","entry","camelCaseToWords","str","match","x","toUpperCase","substr","toLowerCase","join","ChartComponent","countryNames","dataArray","labels","datasets","label","labelName","backgroundColor","borderColor","borderWidth","height","style","scales","yAxes","ticks","beginAtZero","maintainAspectRatio","connect","changeSelectedChart","children","open","setOpen","dropdownRef","onBodyClick","event","contains","target","console","log","document","body","addEventListener","removeEventListener","displayedOptions","option","selected","onClick","sortedChartData","sort","b","chartTitle","Footer","href","rel","undefined","addChartData","getData","then","object","ReactDOM","render","store","createStore","Reducers","getElementById"],"mappings":"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","file":"static/js/main.ccbcf10d.chunk.js","sourcesContent":["const types = {\n  ADD_CHART_DATA: 'ADD_CHART_DATA',\n  CHANGE_SELECTED_CHART: 'CHANGE_SELECTED_CHART'\n}\n\nexport default types","import {combineReducers} from 'redux'\nimport types from '../types'\n\n// This reducer puts all the CSV data into a single JSON file \nconst chartDataReducer = (state = [], { type, payload }) => {\n  switch (type) {\n  case types.ADD_CHART_DATA:\n    return payload\n  default:\n    return state\n  }\n}\n\nconst initialChartOptions = {\n  selectedChart: '',\n  options: []\n}\n\n// This reducer handles the selected chart. Initially it's 'lifeSatisfaction'\nconst chartOptionsReducer = (state = initialChartOptions, { type, payload }) => {\n  switch (type) {\n  case types.ADD_CHART_DATA:\n    const options = Object.keys(payload[0])\n    options.shift() // Remove the \"country\" tag\n    return {\n      selectedChart: 'lifeSatisfaction',\n      options\n    }\n  case types.CHANGE_SELECTED_CHART:\n    return {\n      selectedChart: payload,\n      options: state.options\n    }\n  default:\n    return state\n  }\n}\n\n\nexport default combineReducers({\n  chartData: chartDataReducer,\n  chartOptions: chartOptionsReducer\n})\n","export default __webpack_public_path__ + \"static/media/better_life_index_data.f16a3eb8.csv\";","// This async function reads the CSV file and converts it into JSON\n\nimport Papa from 'papaparse'\n\nimport importedCsvData from '../data/better_life_index_data.csv';\n\nasync function getCSV(){\n  const response = await fetch(importedCsvData)\n  return await response.text()\n}\n\nexport default async function getData() {\n  const csvString = await getCSV()\n  const dataObject = Papa.parse(csvString, {header: true})\n  return dataObject\n}","// This component displays text or HTML with a fancy typing animation\n\nimport React, {useEffect, useRef} from 'react'\nimport Typed from 'typed.js'\n\nconst TypedText = ({text, delay, onComplete}) => {\n  const spanRef = useRef(null);\n  useEffect(()=>{\n    let typed = new Typed(spanRef.current, {\n      strings: text ? [text] : [''],\n      typeSpeed: 30,\n      startDelay: delay ? delay : 0,\n      showCursor: false,\n      onComplete: onComplete ? () => onComplete() : () => {}\n    });\n    return ()=>{\n      typed.destroy();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [text, delay, spanRef])\n\n  return (\n    <span ref={spanRef}/>\n  )\n}\n\nexport default TypedText\n","import React, {useState} from 'react';\n\nimport TypedText from './TypedText';\nimport './Hero.css';\n\nconst Hero = () => {\n  const [firstElementTyped, setFirstElementTyped] = useState(false);\n  return (\n    <div className=\"hero\">\n      <div className=\"hero__text header\">\n        <TypedText\n          text={'We know more than ever about wellbeing in the world.'}\n          onComplete={() => setFirstElementTyped(true)}\n        />\n      </div>\n      <div className=\"hero__title header\">\n        <TypedText\n          text={\n            firstElementTyped &&\n            'What are we <br class=\"only-mobile\" /> <span class=\"highlighted\">doing</span> about it?'\n          }\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Hero;\n","import React from 'react'\n\nimport './Navbar.css'\n\nconst Navbar = () => {\n  return (\n    <div className=\"navbar header\">\n      <i className=\"fas fa-spa icon\"></i>The OECD Better Life Index\n    </div>\n  )\n}\n\nexport default Navbar\n","/********************************************************************************************************\n * This utility function converts the data to an array, so that it can be read by the charts.js library *\n ********************************************************************************************************/\n\n export default function createDataArray(data, selector){\n   return data.map(entry => entry[selector])\n }","// This function converts \"camelCase\" strings to \"Regular Case\" strings\n// Example: 'lifeExpectancy' -> 'Life Expectancy'\n\nexport default function camelCaseToWords(str) {\n  if (str) {\n    return str\n      .match(/^[a-z]+|[A-Z][a-z]*/g)\n      .map(function (x) {\n        return x[0].toUpperCase() + x.substr(1).toLowerCase();\n      })\n      .join(' ');\n  } else return '';\n}\n","import React from 'react';\nimport {HorizontalBar} from 'react-chartjs-2';\n// import Chart from 'chart.js';\n\nconst ChartComponent = ({countryNames, dataArray, labelName}) => {\n  const data = {\n    labels: countryNames,\n    datasets: [\n      {\n        label: labelName,\n        data: dataArray,\n        backgroundColor: '#EE6352',\n        borderColor: '#EE6352',\n        borderWidth: 1,\n      },\n    ],\n  };\n  const options = {\n        scales: {\n          yAxes: [\n            {\n              ticks: {\n                beginAtZero: true,\n              },\n            },\n          ],\n        },\n        maintainAspectRatio: false\n      }\n//   useEffect(() => {\n//     var ctx = document.getElementById('myChart').getContext('2d');\n//     new Chart(ctx, {\n//       type: 'horizontalBar',\n//       data: {\n//         labels: countryNames,\n//         datasets: [\n//           {\n//             label: labelName,\n//             data: dataArray,\n//             backgroundColor: '#EE6352',\n//             borderColor: '#EE6352',\n//             borderWidth: 1,\n//           },\n//         ],\n//       },\n//       options: {\n//         scales: {\n//           yAxes: [\n//             {\n//               ticks: {\n//                 beginAtZero: true,\n//               },\n//             },\n//           ],\n//         },\n//       },\n//     });\n//   });\n\n  return <HorizontalBar\n  height={500}\n  style={{height: `500px`}} data={data} options={options} />//<canvas id=\"myChart\" width=\"400\" height=\"400\"></canvas>;\n};\n\nexport default ChartComponent;\n","import React, {useState, useEffect, useRef} from 'react';\nimport {connect} from 'react-redux';\n\nimport {changeSelectedChart} from '../actions'\n\nimport camelCaseToWords from '../util/camelCaseToWords'\nimport './ChartSelector.css';\n\nconst ChartSelector = ({children, chartOptions, selectedChart, changeSelectedChart}) => {\n  const [open, setOpen] = useState(false);\n\n  // Thanks to these useRef and useEffect hooks, you can click outside the dropdown... and it closes!\n  const dropdownRef = useRef();\n  useEffect(() => {\n    const onBodyClick = (event) => {\n      if (dropdownRef.current && dropdownRef.current.contains(event.target)) {\n        return;\n      }\n      console.log(dropdownRef.current)\n      setOpen(false);\n    };\n    document.body.addEventListener('click', onBodyClick);\n    return () => {\n      document.body.removeEventListener('click', onBodyClick)\n    }\n  }, []);\n\n  // First, we get the chart options to display\n  const displayedOptions = chartOptions.map((option) => {\n    const selected = option === selectedChart\n    return (\n      <div\n        key={option}\n        onClick={() => {\n          setOpen(!open)\n          changeSelectedChart(option)\n        }}\n        className={`text chart-selector__options__option ${\n          selected &&\n          'chart-selector__options__option--selected'\n        }`}\n      >\n        {selected && <i className=\"icon fas fa-chevron-right\"/>}\n        {camelCaseToWords(option)}\n      </div>\n    );\n  });\n\n  return (\n    <span ref={dropdownRef} className=\"chart-selector\">\n      <span onClick={() => setOpen(!open)}>\n        <i\n          className={`icon fas fa-chevron-right chart-selector__chevron ${\n            open && 'chart-selector__chevron--open'\n          }`}\n        ></i>\n        {children}\n      </span>\n      {open && (\n        <div className=\"chart-selector__options\">{displayedOptions}</div>\n      )}\n    </span>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  const {options, selectedChart} = state.chartOptions;\n  return {\n    chartOptions: options,\n    selectedChart,\n  };\n};\n\nexport default connect(mapStateToProps, {changeSelectedChart})(ChartSelector);\n","import types from '../types'\n\nexport const addChartData = (payload) => ({\n  type: types.ADD_CHART_DATA,\n  payload\n})\nexport const changeSelectedChart = (payload) => ({\n  type: types.CHANGE_SELECTED_CHART,\n  payload\n})\n\n\n\n\n\n","import React from 'react';\nimport {connect} from 'react-redux';\n\nimport createDataArray from '../util/createDataArray';\nimport camelCaseToWords from '../util/camelCaseToWords';\nimport TypedText from './TypedText';\nimport ChartComponent from './ChartComponent';\nimport './ChartsArea.css';\nimport ChartSelector from './ChartSelector';\n\nconst ChartsArea = ({chartData, selectedChart}) => {\n  const {countryNames, dataArray} = chartData;\n  const chartTitle = camelCaseToWords(selectedChart);\n\n  return (\n    <div className=\"charts-area\">\n      <h2 className=\"charts-area__title header\">\n        <div className=\"charts-area__title__first\">\n          <i className=\"fas fa-spa icon\"></i>\n          <TypedText text={chartTitle} />\n        </div>\n        <ChartSelector>change</ChartSelector>\n      </h2>\n      <ChartComponent\n        countryNames={countryNames}\n        dataArray={dataArray}\n        labelName={chartTitle}\n      />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  const {chartData, chartOptions} = state;\n\n  //First, we sort the chart's data\n  const sortedChartData = [...chartData];\n  sortedChartData.sort(\n    (a, b) => b[chartOptions.selectedChart] - a[chartOptions.selectedChart]\n  );\n\n  //then, we convert it into an array so that the Charts.js can read it.\n  const countryNames = createDataArray(sortedChartData, 'country');\n  const dataArray = createDataArray(\n    sortedChartData,\n    chartOptions.selectedChart\n  );\n\n  //Finally, we pass the data as props\n  return {\n    chartData: {\n      countryNames,\n      dataArray,\n    },\n    selectedChart: chartOptions.selectedChart,\n  };\n};\n\nexport default connect(mapStateToProps)(ChartsArea);\n","import React from 'react';\n\nimport './Footer.css'\n\nconst Footer = () => {\n  return (\n    <div className=\"footer-area\">\n      <i className=\"fas fa-spa orange icon\" />\n      <p className=\"text\">\n        This project was made with love and dedication by Arnau Gómez. Visit the{' '}\n        <a\n          href=\"https://github.com/ArnoldGee/better-life-index-chart\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <i className=\"fab fa-github icon\"></i> GitHub Repo\n        </a>\n        .\n      </p>\n      <p className=\"text\">\n        If you want to get a performant and visually appealing web app for your\n        business, please hire me as a web developer on{' '}\n        <a\n          href=\"https://www.linkedin.com/in/arnau-g%C3%B3mez-903b49187/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <i className=\"fab fa-linkedin icon\"></i>\n          LinkedIn\n        </a>\n      </p>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React, {useEffect} from 'react';\nimport {connect} from 'react-redux';\n\nimport {addChartData} from './actions';\nimport getData from './util/getData';\nimport Hero from './components/Hero';\nimport Navbar from './components/Navbar';\nimport ChartsArea from './components/ChartsArea';\nimport './App.css';\nimport Footer from './components/Footer';\n\n\nconst App = ({addChartData}) => {\n  \n  useEffect(() => { // First, we get the data from the the file's CSV and add it to the App's state\n    getData()\n      .then((object) => object.data)\n      .then((data) => {\n        addChartData(data);\n      });\n  }, [addChartData]);\n\n  return (\n    <div>\n      <Navbar />\n      <Hero />\n      <ChartsArea />\n      <Footer />\n    </div>\n  );\n};\n\nexport default connect(undefined, {addChartData})(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';\nimport Reducers from './reducers';\n\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={createStore(Reducers)}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}